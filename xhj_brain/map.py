import torch
from torch import nn
import numpy as np
import joblib
from word2vec import v2v

def mapping(house_lst):
    testx = np.array([house_lst])
    testx_3 = v2v(testx[0][7:])
    # @@@@@@@@@@@@@@@@@@@@@@@@
    house_lst[7:] = testx_3
    testx = np.array([house_lst])

    testx = testx.astype(np.float32)
    item_scal = joblib.load('./data/item_scaler.model')
    print('---> item_scaler.model (generated by preprocess.py) <--- loading succeeded.')
    testx = item_scal.transform(testx)
    ########################################################
    net2 = nn.Sequential(nn.Linear(10, 1),)

    def init_weights(m):
        if type(m) == nn.Linear:
            nn.init.ones_(m.weight)
            nn.init.ones_(m.bias)
    net2.apply(init_weights)

    testx = torch.tensor(testx)
    y = net2(testx)
    y = y.detach().numpy()[0][0]
    #print('house -----> house : {}'.format(y))
    return str(y)

if __name__ == "__main__":
    house_lst = [160, 5, 3,2,1,10000,170,'红星商务楼','长沙', '南门口']
    mapping(house_lst)
